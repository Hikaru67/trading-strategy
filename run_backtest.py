#!/usr/bin/env python3
"""
Interactive Backtest Script for BTCUSDT Trading Strategy
Ch·∫°y backtest v·ªõi d·ªØ li·ªáu n·∫øn qu√° kh·ª© t·ª´ Binance
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import argparse
import sys
from backtest import Backtester
from config import TradingConfig

def print_banner():
    """In banner ch√†o m·ª´ng"""
    print("=" * 70)
    print("üî• BTCUSDT TRADING STRATEGY BACKTESTER")
    print("=" * 70)
    print("Ch·∫°y backtest v·ªõi d·ªØ li·ªáu n·∫øn qu√° kh·ª© t·ª´ Binance")
    print("=" * 70)

def get_user_input():
    """L·∫•y input t·ª´ user"""
    print("\nüìä C·∫§U H√åNH BACKTEST")
    print("-" * 40)
    
    # Ch·ªçn th·ªùi gian backtest
    print("\n1. Ch·ªçn kho·∫£ng th·ªùi gian backtest:")
    print("   a) 1 tu·∫ßn g·∫ßn ƒë√¢y")
    print("   b) 1 th√°ng g·∫ßn ƒë√¢y") 
    print("   c) 3 th√°ng g·∫ßn ƒë√¢y")
    print("   d) 6 th√°ng g·∫ßn ƒë√¢y")
    print("   e) 1 nƒÉm g·∫ßn ƒë√¢y")
    print("   f) T√πy ch·ªânh")
    
    time_choice = input("\nCh·ªçn (a-f): ").lower()
    
    if time_choice == 'a':
        start_date = datetime.now() - timedelta(days=7)
        end_date = datetime.now()
    elif time_choice == 'b':
        start_date = datetime.now() - timedelta(days=30)
        end_date = datetime.now()
    elif time_choice == 'c':
        start_date = datetime.now() - timedelta(days=90)
        end_date = datetime.now()
    elif time_choice == 'd':
        start_date = datetime.now() - timedelta(days=180)
        end_date = datetime.now()
    elif time_choice == 'e':
        start_date = datetime.now() - timedelta(days=365)
        end_date = datetime.now()
    elif time_choice == 'f':
        print("\nNh·∫≠p ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD):")
        start_str = input("V√≠ d·ª• 2024-01-01: ")
        print("Nh·∫≠p ng√†y k·∫øt th√∫c (YYYY-MM-DD):")
        end_str = input("V√≠ d·ª• 2024-01-31: ")
        
        try:
            start_date = datetime.strptime(start_str, "%Y-%m-%d")
            end_date = datetime.strptime(end_str, "%Y-%m-%d")
        except ValueError:
            print("‚ùå ƒê·ªãnh d·∫°ng ng√†y kh√¥ng ƒë√∫ng! S·ª≠ d·ª•ng YYYY-MM-DD")
            return None
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
        return None
    
    # Ch·ªçn chi·∫øn l∆∞·ª£c
    print("\n2. Ch·ªçn chi·∫øn l∆∞·ª£c:")
    print("   a) T·∫•t c·∫£ chi·∫øn l∆∞·ª£c (best signal)")
    print("   b) EMA + RSI")
    print("   c) Bollinger Bands + Stochastic")
    print("   d) MACD + VWAP")
    print("   e) Ichimoku")
    print("   f) VSA + OBV")
    
    strategy_choice = input("\nCh·ªçn (a-f): ").lower()
    
    strategy_map = {
        'a': 'all',
        'b': 'ema_rsi',
        'c': 'bollinger_stochastic',
        'd': 'macd_vwap',
        'e': 'ichimoku',
        'f': 'vsa_obv'
    }
    
    if strategy_choice not in strategy_map:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
        return None
    
    strategy_name = strategy_map[strategy_choice]
    
    # S·ªë ti·ªÅn ban ƒë·∫ßu
    print("\n3. S·ªë ti·ªÅn ban ƒë·∫ßu (USDT):")
    try:
        initial_balance = float(input("Nh·∫≠p s·ªë ti·ªÅn (m·∫∑c ƒë·ªãnh 10000): ") or "10000")
    except ValueError:
        print("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng 10000")
        initial_balance = 10000
    
    return {
        'start_date': start_date,
        'end_date': end_date,
        'strategy_name': strategy_name,
        'initial_balance': initial_balance
    }

def run_backtest_with_progress(config):
    """Ch·∫°y backtest v·ªõi progress bar"""
    print(f"\nüöÄ B·∫ÆT ƒê·∫¶U BACKTEST")
    print(f"üìÖ T·ª´: {config['start_date'].strftime('%Y-%m-%d')}")
    print(f"üìÖ ƒê·∫øn: {config['end_date'].strftime('%Y-%m-%d')}")
    print(f"üí∞ S·ªë ti·ªÅn ban ƒë·∫ßu: {config['initial_balance']:,.0f} USDT")
    print(f"üìä Chi·∫øn l∆∞·ª£c: {config['strategy_name']}")
    print("-" * 50)
    
    # T·∫°o backtester
    backtester = Backtester()
    
    # Ch·∫°y backtest
    print("‚è≥ ƒêang t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠...")
    results = backtester.run_backtest(
        symbol='BTCUSDT',
        start_date=config['start_date'],
        end_date=config['end_date'],
        initial_balance=config['initial_balance'],
        strategy_name=config['strategy_name']
    )
    
    if results:
        print("‚úÖ Backtest ho√†n th√†nh!")
        return results
    else:
        print("‚ùå Backtest th·∫•t b·∫°i!")
        return None

def print_detailed_results(results):
    """In k·∫øt qu·∫£ chi ti·∫øt"""
    if not results:
        return
    
    metrics = results['metrics']
    trades = results['trades']
    
    print("\n" + "=" * 70)
    print("üìà K·∫æT QU·∫¢ BACKTEST")
    print("=" * 70)
    
    # Th·ªëng k√™ c∆° b·∫£n
    print(f"üí∞ S·ªë ti·ªÅn cu·ªëi: {results['final_balance']:,.2f} USDT")
    print(f"üìä T·ªïng l·ª£i nhu·∫≠n: {results['total_return']:+.2f}%")
    print(f"üìà T·ªïng s·ªë l·ªánh: {metrics['total_trades']}")
    print(f"‚úÖ L·ªánh th·∫Øng: {metrics['winning_trades']}")
    print(f"‚ùå L·ªánh thua: {metrics['losing_trades']}")
    print(f"üéØ T·ª∑ l·ªá th·∫Øng: {metrics['win_rate']:.2f}%")
    
    # Th·ªëng k√™ n√¢ng cao
    print(f"\nüìä TH·ªêNG K√ä N√ÇNG CAO:")
    print(f"üí∞ T·ªïng PnL: {metrics['total_pnl']:+,.2f} USDT")
    print(f"üìä PnL trung b√¨nh: {metrics['average_pnl']:+,.2f} USDT")
    print(f"üìà Profit Factor: {metrics['profit_factor']:.2f}")
    print(f"üìâ Max Drawdown: {metrics['max_drawdown']:.2f}%")
    print(f"üìä Sharpe Ratio: {metrics['sharpe_ratio']:.2f}")
    
    # Ph√¢n t√≠ch l·ªánh
    if trades:
        print(f"\nüìã PH√ÇN T√çCH L·ªÜNH:")
        
        # L·ªánh th·∫Øng l·ªõn nh·∫•t
        winning_trades = [t for t in trades if t['pnl'] > 0]
        if winning_trades:
            best_trade = max(winning_trades, key=lambda x: x['pnl'])
            print(f"üèÜ L·ªánh th·∫Øng l·ªõn nh·∫•t: {best_trade['pnl']:+,.2f} USDT")
            print(f"   Chi·∫øn l∆∞·ª£c: {best_trade['strategy']}")
            print(f"   Th·ªùi gian: {best_trade['entry_time']} -> {best_trade['exit_time']}")
        
        # L·ªánh thua l·ªõn nh·∫•t
        losing_trades = [t for t in trades if t['pnl'] < 0]
        if losing_trades:
            worst_trade = min(losing_trades, key=lambda x: x['pnl'])
            print(f"üí• L·ªánh thua l·ªõn nh·∫•t: {worst_trade['pnl']:+,.2f} USDT")
            print(f"   Chi·∫øn l∆∞·ª£c: {worst_trade['strategy']}")
            print(f"   Th·ªùi gian: {worst_trade['entry_time']} -> {worst_trade['exit_time']}")
        
        # Th·ªëng k√™ theo chi·∫øn l∆∞·ª£c
        strategy_stats = {}
        for trade in trades:
            strategy = trade['strategy']
            if strategy not in strategy_stats:
                strategy_stats[strategy] = {'trades': 0, 'pnl': 0, 'wins': 0}
            
            strategy_stats[strategy]['trades'] += 1
            strategy_stats[strategy]['pnl'] += trade['pnl']
            if trade['pnl'] > 0:
                strategy_stats[strategy]['wins'] += 1
        
        print(f"\nüìä TH·ªêNG K√ä THEO CHI·∫æN L∆Ø·ª¢C:")
        for strategy, stats in strategy_stats.items():
            win_rate = (stats['wins'] / stats['trades']) * 100 if stats['trades'] > 0 else 0
            print(f"   {strategy}: {stats['trades']} l·ªánh, {stats['pnl']:+,.2f} USDT, {win_rate:.1f}% th·∫Øng")
    
    print("=" * 70)

def save_results_to_csv(results, filename=None):
    """L∆∞u k·∫øt qu·∫£ ra file CSV"""
    if not results or not results['trades']:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u!")
        return
    
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"backtest_results_{timestamp}.csv"
    
    trades_df = pd.DataFrame(results['trades'])
    
    # Th√™m th√¥ng tin t·ªïng quan
    summary_data = {
        'Metric': ['Initial Balance', 'Final Balance', 'Total Return (%)', 'Total Trades', 
                  'Winning Trades', 'Losing Trades', 'Win Rate (%)', 'Total PnL', 
                  'Average PnL', 'Profit Factor', 'Max Drawdown (%)', 'Sharpe Ratio'],
        'Value': [results.get('initial_balance', 0), results['final_balance'], 
                 results['total_return'], results['metrics']['total_trades'],
                 results['metrics']['winning_trades'], results['metrics']['losing_trades'],
                 results['metrics']['win_rate'], results['metrics']['total_pnl'],
                 results['metrics']['average_pnl'], results['metrics']['profit_factor'],
                 results['metrics']['max_drawdown'], results['metrics']['sharpe_ratio']]
    }
    
    summary_df = pd.DataFrame(summary_data)
    
    # L∆∞u ra file
    with pd.ExcelWriter(filename.replace('.csv', '.xlsx'), engine='openpyxl') as writer:
        summary_df.to_excel(writer, sheet_name='Summary', index=False)
        trades_df.to_excel(writer, sheet_name='Trades', index=False)
    
    print(f"üíæ K·∫øt qu·∫£ ƒë√£ l∆∞u v√†o: {filename.replace('.csv', '.xlsx')}")

def main():
    """Main function"""
    print_banner()
    
    # L·∫•y input t·ª´ user
    config = get_user_input()
    if not config:
        print("‚ùå C·∫•u h√¨nh kh√¥ng h·ª£p l·ªá!")
        return
    
    # Ch·∫°y backtest
    results = run_backtest_with_progress(config)
    
    if results:
        # In k·∫øt qu·∫£
        print_detailed_results(results)
        
        # H·ªèi c√≥ mu·ªën l∆∞u k·∫øt qu·∫£ kh√¥ng
        save_choice = input("\nüíæ C√≥ mu·ªën l∆∞u k·∫øt qu·∫£ ra file kh√¥ng? (y/n): ").lower()
        if save_choice == 'y':
            save_results_to_csv(results)
        
        # H·ªèi c√≥ mu·ªën ch·∫°y backtest kh√°c kh√¥ng
        again_choice = input("\nüîÑ C√≥ mu·ªën ch·∫°y backtest kh√°c kh√¥ng? (y/n): ").lower()
        if again_choice == 'y':
            main()
    else:
        print("‚ùå Backtest th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Backtest ƒë√£ d·ª´ng b·ªüi user")
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")
        print("Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh v√† th·ª≠ l·∫°i.")
