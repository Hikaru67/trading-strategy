#!/usr/bin/env python3
"""
Quick Backtest Script - Ch·∫°y backtest nhanh v·ªõi c·∫•u h√¨nh c√≥ s·∫µn
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from backtest import Backtester

def quick_backtest_examples():
    """Ch·∫°y c√°c v√≠ d·ª• backtest nhanh"""
    
    print("üöÄ QUICK BACKTEST EXAMPLES")
    print("=" * 50)
    
    # T·∫°o backtester
    backtester = Backtester()
    
    # C√°c c·∫•u h√¨nh backtest m·∫´u
    test_configs = [
        {
            'name': 'Test 1: 1 th√°ng g·∫ßn ƒë√¢y - T·∫•t c·∫£ chi·∫øn l∆∞·ª£c',
            'start_date': datetime.now() - timedelta(days=30),
            'end_date': datetime.now(),
            'strategy': 'all',
            'balance': 10000
        },
        {
            'name': 'Test 2: 3 th√°ng g·∫ßn ƒë√¢y - EMA + RSI',
            'start_date': datetime.now() - timedelta(days=90),
            'end_date': datetime.now(),
            'strategy': 'ema_rsi',
            'balance': 10000
        },
        {
            'name': 'Test 3: 1 tu·∫ßn g·∫ßn ƒë√¢y - Bollinger + Stochastic',
            'start_date': datetime.now() - timedelta(days=7),
            'end_date': datetime.now(),
            'strategy': 'bollinger_stochastic',
            'balance': 10000
        },
        {
            'name': 'Test 4: 6 th√°ng g·∫ßn ƒë√¢y - MACD + VWAP',
            'start_date': datetime.now() - timedelta(days=180),
            'end_date': datetime.now(),
            'strategy': 'macd_vwap',
            'balance': 10000
        }
    ]
    
    results_summary = []
    
    for i, config in enumerate(test_configs, 1):
        print(f"\nüìä {config['name']}")
        print("-" * 40)
        
        try:
            results = backtester.run_backtest(
                symbol='BTCUSDT',
                start_date=config['start_date'],
                end_date=config['end_date'],
                initial_balance=config['balance'],
                strategy_name=config['strategy']
            )
            
            if results:
                metrics = results['metrics']
                print(f"‚úÖ Ho√†n th√†nh!")
                print(f"   üí∞ L·ª£i nhu·∫≠n: {results['total_return']:+.2f}%")
                print(f"   üìà T·ªïng l·ªánh: {metrics['total_trades']}")
                print(f"   üéØ T·ª∑ l·ªá th·∫Øng: {metrics['win_rate']:.1f}%")
                print(f"   üìä Profit Factor: {metrics['profit_factor']:.2f}")
                
                results_summary.append({
                    'test': config['name'],
                    'return': results['total_return'],
                    'trades': metrics['total_trades'],
                    'win_rate': metrics['win_rate'],
                    'profit_factor': metrics['profit_factor']
                })
            else:
                print("‚ùå Th·∫•t b·∫°i!")
                
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
    
    # In t·ªïng k·∫øt
    if results_summary:
        print("\n" + "=" * 50)
        print("üìä T·ªîNG K·∫æT C√ÅC TEST")
        print("=" * 50)
        
        df = pd.DataFrame(results_summary)
        print(df.to_string(index=False))
        
        # T√¨m test t·ªët nh·∫•t
        best_test = max(results_summary, key=lambda x: x['return'])
        print(f"\nüèÜ Test t·ªët nh·∫•t: {best_test['test']}")
        print(f"   L·ª£i nhu·∫≠n: {best_test['return']:+.2f}%")

def backtest_specific_period():
    """Backtest cho m·ªôt kho·∫£ng th·ªùi gian c·ª• th·ªÉ"""
    
    print("\nüéØ BACKTEST KHO·∫¢NG TH·ªúI GIAN C·ª§ TH·ªÇ")
    print("=" * 50)
    
    # V√≠ d·ª•: Backtest th√°ng 1/2024
    start_date = datetime(2024, 1, 1)
    end_date = datetime(2024, 1, 31)
    
    print(f"üìÖ Kho·∫£ng th·ªùi gian: {start_date.strftime('%Y-%m-%d')} -> {end_date.strftime('%Y-%m-%d')}")
    
    backtester = Backtester()
    
    # Test t·∫•t c·∫£ chi·∫øn l∆∞·ª£c
    strategies = ['all', 'ema_rsi', 'bollinger_stochastic', 'macd_vwap', 'ichimoku', 'vsa_obv']
    
    strategy_results = []
    
    for strategy in strategies:
        print(f"\nüìä Testing {strategy}...")
        
        try:
            results = backtester.run_backtest(
                symbol='BTCUSDT',
                start_date=start_date,
                end_date=end_date,
                initial_balance=10000,
                strategy_name=strategy
            )
            
            if results:
                metrics = results['metrics']
                strategy_results.append({
                    'strategy': strategy,
                    'return': results['total_return'],
                    'trades': metrics['total_trades'],
                    'win_rate': metrics['win_rate'],
                    'profit_factor': metrics['profit_factor'],
                    'max_drawdown': metrics['max_drawdown']
                })
                print(f"   ‚úÖ {results['total_return']:+.2f}% return")
            else:
                print(f"   ‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£")
                
        except Exception as e:
            print(f"   ‚ùå L·ªói: {e}")
    
    # In so s√°nh chi·∫øn l∆∞·ª£c
    if strategy_results:
        print("\n" + "=" * 60)
        print("üìä SO S√ÅNH C√ÅC CHI·∫æN L∆Ø·ª¢C")
        print("=" * 60)
        
        df = pd.DataFrame(strategy_results)
        df = df.sort_values('return', ascending=False)
        print(df.to_string(index=False))
        
        # Chi·∫øn l∆∞·ª£c t·ªët nh·∫•t
        best_strategy = df.iloc[0]
        print(f"\nüèÜ Chi·∫øn l∆∞·ª£c t·ªët nh·∫•t: {best_strategy['strategy']}")
        print(f"   L·ª£i nhu·∫≠n: {best_strategy['return']:+.2f}%")
        print(f"   T·ª∑ l·ªá th·∫Øng: {best_strategy['win_rate']:.1f}%")

def main():
    """Main function"""
    print("üî• BTCUSDT QUICK BACKTEST")
    print("=" * 50)
    
    while True:
        print("\nCh·ªçn lo·∫°i backtest:")
        print("1. Ch·∫°y c√°c test m·∫´u")
        print("2. Backtest th√°ng 1/2024 (so s√°nh chi·∫øn l∆∞·ª£c)")
        print("3. Tho√°t")
        
        choice = input("\nCh·ªçn (1-3): ")
        
        if choice == '1':
            quick_backtest_examples()
        elif choice == '2':
            backtest_specific_period()
        elif choice == '3':
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main()
